pos1 = util.pose_stamped2list(util.convert_reference_frame(util.list2pose_stamped(cfg.PALM_RIGHT), util.unit_pose(), object_pose1_world))[:3]
action_planner.transform_mesh_world()
pos2 = action_planner.mesh_world.face_normals[0]
pos3 = pos1 + pos2
p.addUserDebugLine(pos1, pos3, [0, 1, 0])

palm_normal = action_planner.get_palm_y_normals(None, current=True)['right']

wrist_pos_world = action_planner.robot.get_ee_pose(arm='right')[0].tolist()
wrist_ori_world = action_planner.robot.get_ee_pose(arm='right')[1].tolist()
wrist_poses = util.list2pose_stamped(wrist_pos_world + wrist_ori_world)

wrist_to_tip = util.list2pose_stamped(cfg.WRIST_TO_TIP_TF, '')
tip_right = util.convert_reference_frame(wrist_to_tip, util.unit_pose(), wrist_poses)

pos1 = util.pose_stamped2list(tip_right)[:3]
pos2 = util.pose_stamped2list(palm_normal)[:3]

p.addUserDebugLine(pos1, pos2, [0, 0, 1])





##############################

p.removeUserDebugItem(out_obj)
p.removeUserDebugItem(out_palm)

wrist_poses = {}
for arm in ['right', 'left']:
    wrist_pos_world = self.robot.get_ee_pose(arm=arm)[0].tolist()
    wrist_ori_world = self.robot.get_ee_pose(arm=arm)[1].tolist()

    wrist_poses[arm] = util.list2pose_stamped(wrist_pos_world + wrist_ori_world)

tip_poses = self.robot.wrist_to_tip(wrist_poses)
object_pos = list(p.getBasePositionAndOrientation(
    self.object_id, self.pb_client)[0])
object_ori = list(p.getBasePositionAndOrientation(
    self.object_id, self.pb_client)[1])
object_pose = util.list2pose_stamped(object_pos + object_ori)

#pos1 = util.pose_stamped2list(util.convert_reference_frame(util.list2pose_stamped(cfg.PALM_RIGHT), util.unit_pose(), object_pose))[:3]
pos1 = util.pose_stamped2list(tip_poses['right'])[:3]
pos2 = self.mesh_world.face_normals[0]
pos3 = pos1 + pos2
out_obj = p.addUserDebugLine(pos1, pos3, [0, 1, 0])

palm_normal = self.get_palm_y_normals(None, current=True)['right']

pos1 = util.pose_stamped2list(tip_poses['right'])[:3]
pos2 = util.pose_stamped2list(palm_normal)[:3]

out_palm = p.addUserDebugLine(pos1, pos2, [0, 0, 1])


################################

p.removeUserDebugItem(out_obj)
p.removeUserDebugItem(out_palm)

palm_normal_rel = np.asarray(pos2) - np.asarray(pos1)
obj_normal_rel = self.mesh_world.face_normals[0]

err = -(1 - np.dot(palm_normal_rel, obj_normal_rel))
#dq = self.kp*err + self.kd*(last_err - err)
dq = 10*err + self.kd*(last_err - err)
print("dq: " + str(dq))
last_err = err

joints_update = copy.deepcopy(list(joints_execute))
joints_update[-1] += dq
joints_execute = tuple(joints_update)

self.robot.update_joints(joints_execute, arm=self.active_arm)
