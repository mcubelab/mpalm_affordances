"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import rpo_lcm.rpo_transition_t

class rpo_plan_t(object):
    __slots__ = ["num_steps", "plan"]

    __typenames__ = ["int32_t", "rpo_lcm.rpo_transition_t"]

    __dimensions__ = [None, ["num_steps"]]

    def __init__(self):
        self.num_steps = 0
        self.plan = []

    def encode(self):
        buf = BytesIO()
        buf.write(rpo_plan_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num_steps))
        for i0 in range(self.num_steps):
            assert self.plan[i0]._get_packed_fingerprint() == rpo_lcm.rpo_transition_t._get_packed_fingerprint()
            self.plan[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != rpo_plan_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return rpo_plan_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = rpo_plan_t()
        self.num_steps = struct.unpack(">i", buf.read(4))[0]
        self.plan = []
        for i0 in range(self.num_steps):
            self.plan.append(rpo_lcm.rpo_transition_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if rpo_plan_t in parents: return 0
        newparents = parents + [rpo_plan_t]
        tmphash = (0x6bcf1bd8dd4b36ac+ rpo_lcm.rpo_transition_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if rpo_plan_t._packed_fingerprint is None:
            rpo_plan_t._packed_fingerprint = struct.pack(">Q", rpo_plan_t._get_hash_recursive([]))
        return rpo_plan_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

