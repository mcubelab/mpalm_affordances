"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import rpo_lcm.skill_param_t

class skill_param_array_t(object):
    __slots__ = ["num_entries", "skill_parameter_array"]

    __typenames__ = ["int32_t", "rpo_lcm.skill_param_t"]

    __dimensions__ = [None, ["num_entries"]]

    def __init__(self):
        self.num_entries = 0
        self.skill_parameter_array = []

    def encode(self):
        buf = BytesIO()
        buf.write(skill_param_array_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num_entries))
        for i0 in range(self.num_entries):
            assert self.skill_parameter_array[i0]._get_packed_fingerprint() == rpo_lcm.skill_param_t._get_packed_fingerprint()
            self.skill_parameter_array[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != skill_param_array_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return skill_param_array_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = skill_param_array_t()
        self.num_entries = struct.unpack(">i", buf.read(4))[0]
        self.skill_parameter_array = []
        for i0 in range(self.num_entries):
            self.skill_parameter_array.append(rpo_lcm.skill_param_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if skill_param_array_t in parents: return 0
        newparents = parents + [skill_param_array_t]
        tmphash = (0x7a1c13f9cebc797d+ rpo_lcm.skill_param_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if skill_param_array_t._packed_fingerprint is None:
            skill_param_array_t._packed_fingerprint = struct.pack(">Q", skill_param_array_t._get_hash_recursive([]))
        return skill_param_array_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

