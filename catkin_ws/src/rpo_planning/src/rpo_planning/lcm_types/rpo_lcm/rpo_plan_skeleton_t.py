"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import rpo_lcm.string_array_t

class rpo_plan_skeleton_t(object):
    __slots__ = ["skill_names", "num_skills", "skill_indices"]

    __typenames__ = ["rpo_lcm.string_array_t", "int32_t", "int32_t"]

    __dimensions__ = [None, None, ["num_skills"]]

    def __init__(self):
        self.skill_names = rpo_lcm.string_array_t()
        self.num_skills = 0
        self.skill_indices = []

    def encode(self):
        buf = BytesIO()
        buf.write(rpo_plan_skeleton_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.skill_names._get_packed_fingerprint() == rpo_lcm.string_array_t._get_packed_fingerprint()
        self.skill_names._encode_one(buf)
        buf.write(struct.pack(">i", self.num_skills))
        buf.write(struct.pack('>%di' % self.num_skills, *self.skill_indices[:self.num_skills]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != rpo_plan_skeleton_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return rpo_plan_skeleton_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = rpo_plan_skeleton_t()
        self.skill_names = rpo_lcm.string_array_t._decode_one(buf)
        self.num_skills = struct.unpack(">i", buf.read(4))[0]
        self.skill_indices = struct.unpack('>%di' % self.num_skills, buf.read(self.num_skills * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if rpo_plan_skeleton_t in parents: return 0
        newparents = parents + [rpo_plan_skeleton_t]
        tmphash = (0xb80843fbb0980a5c+ rpo_lcm.string_array_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if rpo_plan_skeleton_t._packed_fingerprint is None:
            rpo_plan_skeleton_t._packed_fingerprint = struct.pack(">Q", rpo_plan_skeleton_t._get_hash_recursive([]))
        return rpo_plan_skeleton_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

