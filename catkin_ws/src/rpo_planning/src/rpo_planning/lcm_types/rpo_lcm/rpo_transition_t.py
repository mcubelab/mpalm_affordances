"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import rpo_lcm.point_cloud_t

import rpo_lcm.skill_param_t

import rpo_lcm.pose_stamped_t

class rpo_transition_t(object):
    __slots__ = ["observation", "action", "action_index", "reward", "achieved_goal", "desired_goal", "done", "scene_context", "skill_parameters"]

    __typenames__ = ["rpo_lcm.point_cloud_t", "string", "int32_t", "float", "rpo_lcm.pose_stamped_t", "rpo_lcm.pose_stamped_t", "boolean", "rpo_lcm.point_cloud_t", "rpo_lcm.skill_param_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.observation = rpo_lcm.point_cloud_t()
        self.action = ""
        self.action_index = 0
        self.reward = 0.0
        self.achieved_goal = rpo_lcm.pose_stamped_t()
        self.desired_goal = rpo_lcm.pose_stamped_t()
        self.done = False
        self.scene_context = rpo_lcm.point_cloud_t()
        self.skill_parameters = rpo_lcm.skill_param_t()

    def encode(self):
        buf = BytesIO()
        buf.write(rpo_transition_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.observation._get_packed_fingerprint() == rpo_lcm.point_cloud_t._get_packed_fingerprint()
        self.observation._encode_one(buf)
        __action_encoded = self.action.encode('utf-8')
        buf.write(struct.pack('>I', len(__action_encoded)+1))
        buf.write(__action_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">if", self.action_index, self.reward))
        assert self.achieved_goal._get_packed_fingerprint() == rpo_lcm.pose_stamped_t._get_packed_fingerprint()
        self.achieved_goal._encode_one(buf)
        assert self.desired_goal._get_packed_fingerprint() == rpo_lcm.pose_stamped_t._get_packed_fingerprint()
        self.desired_goal._encode_one(buf)
        buf.write(struct.pack(">b", self.done))
        assert self.scene_context._get_packed_fingerprint() == rpo_lcm.point_cloud_t._get_packed_fingerprint()
        self.scene_context._encode_one(buf)
        assert self.skill_parameters._get_packed_fingerprint() == rpo_lcm.skill_param_t._get_packed_fingerprint()
        self.skill_parameters._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != rpo_transition_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return rpo_transition_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = rpo_transition_t()
        self.observation = rpo_lcm.point_cloud_t._decode_one(buf)
        __action_len = struct.unpack('>I', buf.read(4))[0]
        self.action = buf.read(__action_len)[:-1].decode('utf-8', 'replace')
        self.action_index, self.reward = struct.unpack(">if", buf.read(8))
        self.achieved_goal = rpo_lcm.pose_stamped_t._decode_one(buf)
        self.desired_goal = rpo_lcm.pose_stamped_t._decode_one(buf)
        self.done = bool(struct.unpack('b', buf.read(1))[0])
        self.scene_context = rpo_lcm.point_cloud_t._decode_one(buf)
        self.skill_parameters = rpo_lcm.skill_param_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if rpo_transition_t in parents: return 0
        newparents = parents + [rpo_transition_t]
        tmphash = (0xb5cba1cdf924cac1+ rpo_lcm.point_cloud_t._get_hash_recursive(newparents)+ rpo_lcm.pose_stamped_t._get_hash_recursive(newparents)+ rpo_lcm.pose_stamped_t._get_hash_recursive(newparents)+ rpo_lcm.point_cloud_t._get_hash_recursive(newparents)+ rpo_lcm.skill_param_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if rpo_transition_t._packed_fingerprint is None:
            rpo_transition_t._packed_fingerprint = struct.pack(">Q", rpo_transition_t._get_hash_recursive([]))
        return rpo_transition_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

