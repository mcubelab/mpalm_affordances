"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import rpo_lcm.pose_stamped_t

class skill_param_t(object):
    __slots__ = ["num_points", "mask_probs", "contact_pose", "subgoal_pose"]

    __typenames__ = ["int32_t", "float", "rpo_lcm.pose_stamped_t", "rpo_lcm.pose_stamped_t"]

    __dimensions__ = [None, ["num_points"], ["num_points"], None]

    def __init__(self):
        self.num_points = 0
        self.mask_probs = []
        self.contact_pose = []
        self.subgoal_pose = rpo_lcm.pose_stamped_t()

    def encode(self):
        buf = BytesIO()
        buf.write(skill_param_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num_points))
        buf.write(struct.pack('>%df' % self.num_points, *self.mask_probs[:self.num_points]))
        for i0 in range(self.num_points):
            assert self.contact_pose[i0]._get_packed_fingerprint() == rpo_lcm.pose_stamped_t._get_packed_fingerprint()
            self.contact_pose[i0]._encode_one(buf)
        assert self.subgoal_pose._get_packed_fingerprint() == rpo_lcm.pose_stamped_t._get_packed_fingerprint()
        self.subgoal_pose._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != skill_param_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return skill_param_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = skill_param_t()
        self.num_points = struct.unpack(">i", buf.read(4))[0]
        self.mask_probs = struct.unpack('>%df' % self.num_points, buf.read(self.num_points * 4))
        self.contact_pose = []
        for i0 in range(self.num_points):
            self.contact_pose.append(rpo_lcm.pose_stamped_t._decode_one(buf))
        self.subgoal_pose = rpo_lcm.pose_stamped_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if skill_param_t in parents: return 0
        newparents = parents + [skill_param_t]
        tmphash = (0x40efb6c2f5b03912+ rpo_lcm.pose_stamped_t._get_hash_recursive(newparents)+ rpo_lcm.pose_stamped_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if skill_param_t._packed_fingerprint is None:
            skill_param_t._packed_fingerprint = struct.pack(">Q", skill_param_t._get_hash_recursive([]))
        return skill_param_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

